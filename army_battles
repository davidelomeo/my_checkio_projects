# Taken from mission The Warriors

class Warrior:
    health = 50
    attack = 5
    if health <= 0:
        is_alive = False
    else:
        is_alive = True
    pass

class Knight(Warrior):
    health = 50
    attack = 7
    is_alive = Warrior.is_alive
    pass

def fight(unit_1, unit_2):
    turn = 0
    
    while (unit_1.health or unit_2.health) > 0:
        if turn % 2 == 0:
            unit_2.health = unit_2.health - unit_1.attack
            turn += 1
        else:
            unit_1.health = unit_1.health - unit_2.attack
            turn += 1

        if unit_1.health <= 0:
            unit_1.is_alive = False
            return False
        elif unit_2.health <= 0:
            unit_2.is_alive = False
            return True

class Army:

    def __init__(self):
        self.units = []

    def add_units(self, unit, number):
        for i in range(number):
            self.units.append(unit())
pass

class Battle:
    def fight(self, army_1, army_2):
        self.army_1 = army_1
        self.army_2 = army_2
        while (len(army_1.units) or len(army_2.units)) > 0:
            if len(army_1.units) == 0:
                break
            elif len(army_2.units) == 0:
                break
            if fight(army_1.units[-1], army_2.units[-1]) == False:
                del army_1.units[-1]
            else:
                del army_2.units[-1]
        if len(army_1.units) <= 0:
            return False
        elif len(army_2.units) <= 0:
            return True
        pass
    pass
pass


if __name__ == '__main__':
    #These "asserts" using only for self-checking and not necessary for auto-testing
    
    #fight tests
    chuck = Warrior()
    bruce = Warrior()
    carl = Knight()
    dave = Warrior()
    mark = Warrior()

    assert fight(chuck, bruce) == True
    assert fight(dave, carl) == False
    assert chuck.is_alive == True
    assert bruce.is_alive == False
    assert carl.is_alive == True
    assert dave.is_alive == False
    assert fight(carl, mark) == False
    assert carl.is_alive == False

    #battle tests
    my_army = Army()
    my_army.add_units(Knight, 3)
    
    enemy_army = Army()
    enemy_army.add_units(Warrior, 3)

    army_3 = Army()
    army_3.add_units(Warrior, 20)
    army_3.add_units(Knight, 5)
    
    army_4 = Army()
    army_4.add_units(Warrior, 30)

    battle = Battle()

    assert battle.fight(my_army, enemy_army) == True
    assert battle.fight(army_3, army_4) == False
    print("Coding complete? Let's try tests!")
